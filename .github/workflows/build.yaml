name: Deploy KrakenD, Kong & QAP Gateway

on:
  push:
    branches:
      - main
    paths:
      - "krakend/krakend.json"
      - "kong/**"
      - "qapgateway/**"
      - "qap-gateway/**"
      - "template-kong/**"
      - "template-krakend/**"

jobs:
  set-flags:
    runs-on: ubuntu-latest
    outputs:
      krakend_enabled: ${{ steps.set-flags.outputs.krakend_enabled }}
      kong_enabled: ${{ steps.set-flags.outputs.kong_enabled }}
      qap_gateway_enabled: ${{ steps.set-flags.outputs.qap_gateway_enabled }}

    steps:
      - name: Notify QAP Admin - Init CI
        run: |
          curl --location 'https://qap-backend-dev.k8s.konneqt.cloud/webhook' \
            --header 'Content-Type: application/json' \
            --data '{
              "url": "",
              "api": "from-scratch",
              "deploymentUnit": "from-scratch",
              "ciStatus": "Init CI"
            }'

      - name: Set flags for KrakenD, Kong, and QAP Gateway
        id: set-flags
        run: |
          if [ -n "${{ secrets.KRAKEND_CAPROVER_APP_NAME }}" ]; then
            echo "krakend_enabled=true" >> $GITHUB_OUTPUT
          fi
          if [ -n "${{ secrets.KONG_CAPROVER_APP_NAME }}" ]; then
            echo "kong_enabled=true" >> $GITHUB_OUTPUT
          fi
          if [ -n "${{ secrets.QAPGATEWAY_CAPROVER_APP_NAME }}" ]; then
            echo "qap_gateway_enabled=true" >> $GITHUB_OUTPUT
          fi

  krakend-deploy:
    needs: set-flags
    if: needs.set-flags.outputs.krakend_enabled == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute registry variables
        shell: bash
        run: |
          REG_SERVER="${{ secrets.REGISTRY_URL }}"
          REG_SERVER="${REG_SERVER#http://}"
          REG_SERVER="${REG_SERVER#https://}"
          REG_SERVER="${REG_SERVER%/}"
          NS="${{ secrets.REGISTRY_NAMESPACE }}"
          if [ -n "$NS" ]; then
            echo "IMAGE_PREFIX=${REG_SERVER}/${NS}/" >> $GITHUB_ENV
          else
            echo "IMAGE_PREFIX=${REG_SERVER}/" >> $GITHUB_ENV
          fi
          echo "REGISTRY_LOGIN_SERVER=${REG_SERVER}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_$(date +%s)" >> $GITHUB_ENV
          echo "KR_IMAGE=${IMAGE_PREFIX}from-scratch_krakend:${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build KrakenD Docker Image
        run: docker build -t "$KR_IMAGE" -f ./krakend/dockerfile .

      - name: Push KrakenD Docker Image
        run: docker push "$KR_IMAGE"

      - name: Deploy KrakenD to CapRover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: ${{ secrets.CAPROVER_SERVER }}
          app: ${{ secrets.KRAKEND_CAPROVER_APP_NAME }}
          token: ${{ secrets.KRAKEND_CAPROVER_TOKEN }}
          image: ${{ env.KR_IMAGE }}

      - name: Notify QAP Admin - DEPLOYED
        run: |
          curl --location 'https://qap-backend-dev.k8s.konneqt.cloud/webhook' \
            --header 'Content-Type: application/json' \
            --data '{
              "url": "/",
              "api": "from-scratch",
              "deploymentUnit": "from-scratch",
              "gateway": "KRAKEND",
              "ciStatus": "DEPLOYED"
            }'

  kong-deploy:
    needs: set-flags
    if: needs.set-flags.outputs.kong_enabled == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute registry variables
        shell: bash
        run: |
          REG_SERVER="${{ secrets.REGISTRY_URL }}"
          REG_SERVER="${REG_SERVER#http://}"
          REG_SERVER="${REG_SERVER#https://}"
          REG_SERVER="${REG_SERVER%/}"
          NS="${{ secrets.REGISTRY_NAMESPACE }}"
          if [ -n "$NS" ]; then
            echo "IMAGE_PREFIX=${REG_SERVER}/${NS}/" >> $GITHUB_ENV
          else
            echo "IMAGE_PREFIX=${REG_SERVER}/" >> $GITHUB_ENV
          fi
          echo "REGISTRY_LOGIN_SERVER=${REG_SERVER}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_$(date +%s)" >> $GITHUB_ENV
          echo "KONG_IMAGE=${IMAGE_PREFIX}from-scratch_kong:${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build Kong Docker Image
        run: docker build -t "$KONG_IMAGE" -f ./kong/dockerfile .

      - name: Push Kong Docker Image
        run: docker push "$KONG_IMAGE"

      - name: Deploy Kong to CapRover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: ${{ secrets.CAPROVER_SERVER }}
          app: ${{ secrets.KONG_CAPROVER_APP_NAME }}
          token: ${{ secrets.KONG_CAPROVER_TOKEN }}
          image: ${{ env.KONG_IMAGE }}

      - name: Notify QAP Admin - DEPLOYED
        run: |
          curl --location 'https://qap-backend-dev.k8s.konneqt.cloud/webhook' \
            --header 'Content-Type: application/json' \
            --data '{
              "url": "/",
              "api": "from-scratch",
              "deploymentUnit": "from-scratch",
              "gateway": "KONG",
              "ciStatus": "DEPLOYED"
            }'

  qap-gateway-deploy:
    needs: set-flags
    if: needs.set-flags.outputs.qap_gateway_enabled == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build QAP Plugin
        run: |
          mkdir -p qapgateway/plugins
          docker run --rm -v "$(pwd)/qapgateway:/app" -w /app krakend/builder:2.7.0 \
            go build -buildmode=plugin -o plugins/qap-krakend-plugin.so .

      - name: Compute registry variables
        shell: bash
        run: |
          REG_SERVER="${{ secrets.REGISTRY_URL }}"
          REG_SERVER="${REG_SERVER#http://}"
          REG_SERVER="${REG_SERVER#https://}"
          REG_SERVER="${REG_SERVER%/}"
          NS="${{ secrets.REGISTRY_NAMESPACE }}"
          if [ -n "$NS" ]; then
            echo "IMAGE_PREFIX=${REG_SERVER}/${NS}/" >> $GITHUB_ENV
          else
            echo "IMAGE_PREFIX=${REG_SERVER}/" >> $GITHUB_ENV
          fi
          echo "REGISTRY_LOGIN_SERVER=${REG_SERVER}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}_$(date +%s)" >> $GITHUB_ENV
          echo "QAP_IMAGE=${IMAGE_PREFIX}from-scratch_qap_gateway:${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build Docker Image - QAP Gateway
        run: |
          docker build \
            --build-arg NATS_URL=${{ secrets.NATS_URL }} \
            --build-arg NATS_TOKEN=${{ secrets.NATS_TOKEN }} \
            --build-arg NATS_QUEUE_QAP=${{ secrets.NATS_QUEUE_QAP }} \
            --build-arg NATS_QUEUE_ANALYTICS=${{ secrets.NATS_QUEUE_ANALYTICS }} \
            --build-arg ENDPOINT_CHECK=${{ secrets.ENDPOINT_CHECK }} \
            -t "$QAP_IMAGE" \
            -f ./qapgateway/dockerfile ./qapgateway

      - name: Push Docker Image - QAP Gateway
        run: docker push "$QAP_IMAGE"

      - name: Deploy QAP Gateway to CapRover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: ${{ secrets.CAPROVER_SERVER }}
          app: ${{ secrets.QAPGATEWAY_CAPROVER_APP_NAME }}
          token: ${{ secrets.QAPGATEWAY_CAPROVER_TOKEN }}
          image: ${{ env.QAP_IMAGE }}

      - name: Notify QAP Admin - DEPLOYED
        run: |
          curl --location 'https://qap-backend-dev.k8s.konneqt.cloud/webhook' \
            --header 'Content-Type: application/json' \
            --data '{
              "url": "https://qap-gw-dev.apps.konneqt.cloud/",
              "api": "from-scratch",
              "deploymentUnit": "from-scratch",
              "gateway": "QAPGATEWAY",
              "ciStatus": "DEPLOYED"
            }'
