{
  "info": {
    "title": "Bank pet",
    "version": "0.1.9",
    "description": "Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML."
  },
  "tags": [],
  "paths": {
    "/bank-pettest/list-users": {
      "get": {
        "summary": "Retrieve List Users",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "parameters": []
      }
    },
    "/bank-pettest/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of pet to return"
          }
        ],
        "description": "Returns a single pet",
        "operationId": "getPetById"
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of pet that needs to be updated"
          }
        ],
        "operationId": "updatePetWithForm",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/pet_petId_body"
              }
            }
          }
        }
      }
    },
    "/bank-pettest/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "explode": true,
            "required": true,
            "description": "Tags to filter by"
          }
        ],
        "description": "Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags"
      }
    },
    "/bank-pettest/delete-user/{id}": {
      "delete": {
        "summary": "Delete Id",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of id to return"
          }
        ]
      }
    },
    "/bank-pettest/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ],
                "type": "string",
                "default": "available"
              }
            },
            "explode": true,
            "required": true,
            "description": "Status values that need to be considered for filter"
          }
        ],
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus"
      }
    },
    "/bank-pettest/update-users/{id}": {
      "put": {
        "summary": "Update Id",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of id to return"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Qap-Bank-pettestupdate-users"
              }
            }
          },
          "required": true,
          "description": "Create a new Bank-pettestupdate-users in the store"
        }
      }
    },
    "/bank-pettest/store/order/{orderId}": {
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            },
            "required": true,
            "description": "ID of the order that needs to be deleted"
          }
        ],
        "description": "For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder"
      }
    }
  },
  "openapi": "3.0.0",
  "servers": [],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "schemas": {
      "Qap-Bank-pettestupdate-users": {
        "type": "object",
        "properties": {}
      }
    },
    "requestBodies": {},
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}